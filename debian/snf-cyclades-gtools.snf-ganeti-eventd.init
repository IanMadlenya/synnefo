#!/bin/sh

### BEGIN INIT INFO
# Provides:          snf-ganeti-eventd
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Synnefo Ganeti event daemon
# Description:       Daemon that monitors the Ganeti job list for Synnefo
### END INIT INFO

# Do NOT "set -e",
# Per Debian Policy Manual, section: System run levels and init.d scripts
# set -e

# /etc/init.d/snf-ganeti-eventd: start and stop the Synnefo Ganeti Event Daemon

DAEMON=/usr/sbin/snf-ganeti-eventd
NAME="snf-ganeti-eventd"
DESCRIPTION="snf-ganeti-eventd daemon"
DAEMON_OPTS=''
DAEMON_DEFAULTS_FILE=/etc/default/$NAME
RUNDIR=/var/run/
PIDFILE=$RUNDIR/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
SNF_EVENTD_ENABLE=true
SNF_USER=root

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read defaults file if it is present
[ -r "$DAEMON_DEFAULTS_FILE" ] && . $DAEMON_DEFAULTS_FILE

# Load LSB functions
. /lib/lsb/init-functions

export PATH="${PATH:+$PATH:}/usr/sbin:/sbin"

check_config()
{
    # Check Configuration file
    if [ -r $DAEMON_DEFAULTS_FILE ]; then
        # Load extra daemon options
        DAEMON_OPTS=$SNF_EVENTD_OPTS" --pid-file $PIDFILE"
        # Check the 'ENABLE" value
        case "x$SNF_EVENTD_ENABLE" in
          xtrue|xfalse)	;;
          *)
            log_failure_msg "Value of SNF_EVENTD_ENABLE in $DAEMON_DEFAULTS_FILE must be either 'true' or 'false';"
            log_failure_msg "not starting $NAME daemon."
            exit 1
            ;;
        esac
    else
        log_warning_msg "$NAME default file $DAEMON_DEFAULTS_FILE is missing"
    fi
}

check_ganeti_master() {
    MASTER=`/usr/sbin/gnt-cluster getmaster`
    HOST=`/bin/hostname -f`

    if [ "x$MASTER" != x$HOST ]; then
        log_warning_msg "snf-ganeti-eventd should run on the ganeti master only, aborting start (use 'force-start' if you know what you are doing)"
        log_end_msg 0
        exit 0
    fi
}

do_start() {
	# Ensure the directory containing the pidfile exists
	# and has the right permissions
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    #   3 if daemon is not configured to start
    force_start=$1
    check_config
    [ $force_start -eq 0 ] && check_ganeti_master
	if "$SNF_EVENTD_ENABLE"; then
            if [ -s $PIDFILE ] && kill -0 $(cat $PIDFILE) >/dev/null 2>&1; then
              return 1
            else
              SNF_USER=${SNF_USER:-root}
              start-stop-daemon --start --chuid $SNF_USER --exec $DAEMON --pidfile $PIDFILE -- $DAEMON_OPTS || return 2
              sleep 1
              if [ ! -s $PIDFILE ] || ! kill -0 $(cat $PIDFILE) >/dev/null 2>&1; then
                log_warning_msg "$NAME daemon failed to start"
                return 2
              fi
            fi
    else
	  log_warning_msg "$NAME not enabled in $DAEMON_DEFAULTS_FILE, not starting."
      return 3
    fi
}


do_stop() {
    # Return
    # 0 if daemon has been stopped
    # 1 if daemon was already stopped
    # 2 if deamon could not be stopped
    # other if failure occured
    start-stop-daemon --stop --quiet --pidfile $PIDFILE --retry=TERM/30/KILL/5
    return $?
}


case "$1" in
  start)
    log_daemon_msg "Starting $DESCRIPTION" "$NAME"
    do_start 0
    case "$?" in
      0|3) log_end_msg 0 ;;
      1) log_progress_msg "Apparently already running" && log_end_msg 0;;
      2) log_end_msg 1 ;;
    esac
    ;;
  force-start)
    log_daemon_msg "Starting $DESCRIPTION" "$NAME"
    do_start 1
    case "$?" in
      0|3) log_end_msg 0 ;;
      1) log_progress_msg "Apparently already running" && log_end_msg 0;;
      2) log_end_msg 1 ;;
    esac
    ;;
  stop)
    log_daemon_msg "Stoping $DESCRIPTION" "$NAME"
    do_stop
    case "$?" in
      0|1) log_end_msg 0 ;;
      2) log_end_msg 1 ;;
    esac
	;;
  status)
	status_of_proc -p $PIDFILE $DAEMON $NAME && exit 0 || exit $?
	;;
  restart|force-reload)
    log_daemon_msg "Restarting $DESCRIPTION" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start 0
        case "$?" in
          0) log_end_msg 0 ;;
          *) log_end_msg 1 ;;  # Old process stil running or failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
	;;
  *)
	echo "Usage: /etc/init.d/snf-ganeti-eventd {start|stop|status|restart|force-reload}" >&2
	exit 3
    ;;
esac
